{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"uin",
				"uint8_t"
			],
			[
				"Ge",
				"Get_Adc"
			],
			[
				"for",
				"for	Arduino for"
			],
			[
				"in",
				"include	(UART1.h)"
			],
			[
				"led",
				"LEDA_troggle"
			],
			[
				"e",
				"extern"
			],
			[
				"dtgooc",
				"Data_Tx_GOOC"
			],
			[
				"crl",
				"Ctrl"
			],
			[
				"olen",
				"OLED_ShowNum"
			],
			[
				"Tes",
				"TextSize	char"
			],
			[
				"T",
				"true"
			],
			[
				"p",
				"PHASE"
			],
			[
				"f",
				"fprintf	fprintf …"
			],
			[
				"li",
				"linux"
			],
			[
				"ct",
				"ctag"
			],
			[
				"re",
				"return"
			],
			[
				"y_",
				"y_page"
			],
			[
				"y",
				"y_data"
			],
			[
				"su",
				"SUCCESS"
			],
			[
				"Rcv",
				"Receive"
			],
			[
				"rec",
				"Receive"
			],
			[
				"st",
				"str"
			],
			[
				"rx_",
				"rx_r1"
			],
			[
				"rx",
				"rxH_rkrs_k"
			],
			[
				"ui",
				"uint8"
			],
			[
				"r2",
				"r2_rand"
			],
			[
				"mem",
				"osal_memcpy"
			],
			[
				"strc",
				"strcat"
			],
			[
				"k",
				"key2"
			],
			[
				"out",
				"output"
			],
			[
				"le",
				"length"
			],
			[
				"md",
				"MD5_16"
			],
			[
				"ma",
				"main	main()"
			],
			[
				"urx",
				"URX0IF"
			],
			[
				"U0",
				"U0DBUF"
			],
			[
				"UART_",
				"UART_RX"
			],
			[
				"uar",
				"UartRxCnt"
			],
			[
				"de",
				"DelayMS"
			],
			[
				"g",
				"GUI_BLACK"
			],
			[
				"u",
				"uchar"
			],
			[
				"fr",
				"Frame_Y"
			],
			[
				"en",
				"enemy_y"
			],
			[
				"fi",
				"fire_x"
			],
			[
				"se",
				"setup	Arduino setup"
			],
			[
				"SStar_",
				"SStar_X"
			],
			[
				"GUI_b",
				"GUI_BLACK"
			],
			[
				"bs",
				"BStar_X"
			],
			[
				"Bs",
				"BStar_X"
			],
			[
				"BStar_",
				"BStar_X"
			],
			[
				"G",
				"GUI_WHITE"
			],
			[
				"Init",
				"InitStar"
			],
			[
				"ran",
				"rand"
			],
			[
				"ini",
				"InitPlane"
			],
			[
				"pl",
				"PlaneHeight"
			],
			[
				"bmp",
				"bmplane"
			],
			[
				"GUI",
				"GUI_BITMAP"
			],
			[
				"lc",
				"LCDYSize"
			],
			[
				"F",
				"Frame_X"
			],
			[
				"LCD",
				"LCDXSize"
			],
			[
				"dr",
				"DrawBall"
			],
			[
				"style",
				"stylesheet"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "/******************** (C) COPYRIGHT 2014 ANO Tech ********************************\n  * ×÷Õß   £ºÄäÃû¿Æ´´\n * ÎÄ¼þÃû  £ºdata_transfer.c\n * ÃèÊö    £ºÊý¾Ý´«Êä\n * ¹ÙÍø    £ºwww.anotc.com\n * ÌÔ±¦    £ºanotc.taobao.com\n * ¼¼ÊõQÈº £º190169595\n**********************************************************************************/\n\n#include \"stm32f1xx_hal.h\"\n\n/////////////////////////////////////////////////////////////////////////////////////\n//Êý¾Ý²ð·Öºê¶¨Òå£¬ÔÚ·¢ËÍ´óÓÚ1×Ö½ÚµÄÊý¾ÝÀàÐÍÊ±£¬±ÈÈçint16¡¢floatµÈ£¬ÐèÒª°ÑÊý¾Ý²ð·Ö³Éµ¥¶À×Ö½Ú½øÐÐ·¢ËÍ\n#define BYTE0(dwTemp)       ( *( (char *)(&dwTemp)		) )\n#define BYTE1(dwTemp)       ( *( (char *)(&dwTemp) + 1) )\n#define BYTE2(dwTemp)       ( *( (char *)(&dwTemp) + 2) )\n#define BYTE3(dwTemp)       ( *( (char *)(&dwTemp) + 3) )\n\ndt_flag_t f;					//ÐèÒª·¢ËÍÊý¾ÝµÄ±êÖ¾\nu8 data_to_send[50];	//·¢ËÍÊý¾Ý»º´æ\n\n/////////////////////////////////////////////////////////////////////////////////////\n//Data_Exchangeº¯Êý´¦Àí¸÷ÖÖÊý¾Ý·¢ËÍÇëÇó£¬±ÈÈçÏëÊµÏÖÃ¿5ms·¢ËÍÒ»´Î´«¸ÐÆ÷Êý¾ÝÖÁÉÏÎ»»ú£¬¼´ÔÚ´Ëº¯ÊýÄÚÊµÏÖ\n//´Ëº¯ÊýÓ¦ÓÉÓÃ»§Ã¿1msµ÷ÓÃÒ»´Î\nvoid ANO_DT_Data_Exchange(void)\n{\n	static u8 cnt = 0;\n	static u8 senser_cnt 	= 10;\n	static u8 status_cnt 	= 15;\n	static u8 rcdata_cnt 	= 20;\n	static u8 motopwm_cnt	= 20;\n	static u8 power_cnt		=	50;\n	\n	if((cnt % senser_cnt) == (senser_cnt-1))\n		f.send_senser = 1;	\n	\n	if((cnt % status_cnt) == (status_cnt-1))\n		f.send_status = 1;	\n	\n	if((cnt % rcdata_cnt) == (rcdata_cnt-1))\n		f.send_rcdata = 1;	\n	\n	if((cnt % motopwm_cnt) == (motopwm_cnt-1))\n		f.send_motopwm = 1;	\n	\n	if((cnt % power_cnt) == (power_cnt-1))\n		f.send_power = 1;		\n	\n	cnt++;\n/////////////////////////////////////////////////////////////////////////////////////\n	if(f.send_version)\n	{\n		f.send_version = 0;\n		ANO_DT_Send_Version(4,300,100,400,0);\n	}\n/////////////////////////////////////////////////////////////////////////////////////\n	else if(f.send_status)\n	{\n		f.send_status = 0;\n		ANO_DT_Send_Status(Roll,Pitch,Yaw,baroAlt,0,fly_ready);\n	}	\n/////////////////////////////////////////////////////////////////////////////////////\n	else if(f.send_senser)\n	{\n		f.send_senser = 0;\n		ANO_DT_Send_Senser(mpu6050.Acc.x,mpu6050.Acc.y,mpu6050.Acc.z,\n												mpu6050.Gyro.x,mpu6050.Gyro.y,mpu6050.Gyro.z,\n												ak8975.Mag_Adc.x,ak8975.Mag_Adc.y,ak8975.Mag_Adc.z,0);\n	}	\n/////////////////////////////////////////////////////////////////////////////////////\n	else if(f.send_rcdata)\n	{\n		f.send_rcdata = 0;\n		ANO_DT_Send_RCData(Rc_Pwm_In[0],Rc_Pwm_In[1],Rc_Pwm_In[2],Rc_Pwm_In[3],Rc_Pwm_In[4],Rc_Pwm_In[5],Rc_Pwm_In[6],Rc_Pwm_In[7],0,0);\n	}	\n/////////////////////////////////////////////////////////////////////////////////////	\n	else if(f.send_motopwm)\n	{\n		f.send_motopwm = 0;\n		ANO_DT_Send_MotoPWM(1,2,3,4,5,6,7,8);\n	}	\n/////////////////////////////////////////////////////////////////////////////////////\n	else if(f.send_power)\n	{\n		f.send_power = 0;\n		ANO_DT_Send_Power(123,456);\n	}\n/////////////////////////////////////////////////////////////////////////////////////\n	else if(f.send_pid1)\n	{\n		f.send_pid1 = 0;\n		ANO_DT_Send_PID(1,ctrl_1.PID[PIDROLL].kp,ctrl_1.PID[PIDROLL].ki,ctrl_1.PID[PIDROLL].kd,\n											ctrl_1.PID[PIDPITCH].kp,ctrl_1.PID[PIDPITCH].ki,ctrl_1.PID[PIDPITCH].kd,\n											ctrl_1.PID[PIDYAW].kp,ctrl_1.PID[PIDYAW].ki,ctrl_1.PID[PIDYAW].kd);\n	}	\n/////////////////////////////////////////////////////////////////////////////////////\n	else if(f.send_pid2)\n	{\n		f.send_pid2 = 0;\n		ANO_DT_Send_PID(2,ctrl_1.PID[PID4].kp,ctrl_1.PID[PID4].ki,ctrl_1.PID[PID4].kd,\n											ctrl_1.PID[PID5].kp,ctrl_1.PID[PID5].ki,ctrl_1.PID[PID5].kd,\n											ctrl_1.PID[PID6].kp,ctrl_1.PID[PID6].ki,ctrl_1.PID[PID6].kd);\n	}\n/////////////////////////////////////////////////////////////////////////////////////\n	else if(f.send_pid3)\n	{\n		f.send_pid3 = 0;\n		ANO_DT_Send_PID(3,ctrl_2.PID[PIDROLL].kp,ctrl_2.PID[PIDROLL].ki,ctrl_2.PID[PIDROLL].kd,\n											ctrl_2.PID[PIDPITCH].kp,ctrl_2.PID[PIDPITCH].ki,ctrl_2.PID[PIDPITCH].kd,\n											ctrl_2.PID[PIDYAW].kp,ctrl_2.PID[PIDYAW].ki,ctrl_2.PID[PIDYAW].kd);\n	}\n/////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////\n	Usb_Hid_Send();					\n/////////////////////////////////////////////////////////////////////////////////////\n}\n\n/////////////////////////////////////////////////////////////////////////////////////\n//Send_Dataº¯ÊýÊÇÐ­ÒéÖÐËùÓÐ·¢ËÍÊý¾Ý¹¦ÄÜÊ¹ÓÃµ½µÄ·¢ËÍº¯Êý\n//ÒÆÖ²Ê±£¬ÓÃ»§Ó¦¸ù¾Ý×ÔÉíÓ¦ÓÃµÄÇé¿ö£¬¸ù¾ÝÊ¹ÓÃµÄÍ¨ÐÅ·½Ê½£¬ÊµÏÖ´Ëº¯Êý\nvoid ANO_DT_Send_Data(u8 *dataToSend , u8 length)\n{\n#ifdef ANO_DT_USE_USB_HID\n	Usb_Hid_Adddata(data_to_send,length);\n#endif\n#ifdef ANO_DT_USE_USART2\n	Usart2_Send(data_to_send, length);\n#endif\n}\n\nstatic void ANO_DT_Send_Check(u8 head, u8 check_sum)\n{\n	data_to_send[0]=0xAA;\n	data_to_send[1]=0xAA;\n	data_to_send[2]=0xEF;\n	data_to_send[3]=2;\n	data_to_send[4]=head;\n	data_to_send[5]=check_sum;\n	\n	\n	u8 sum = 0;\n	for(u8 i=0;i<6;i++)\n		sum += data_to_send[i];\n	data_to_send[6]=sum;\n\n	ANO_DT_Send_Data(data_to_send, 7);\n}\n\n/////////////////////////////////////////////////////////////////////////////////////\n//Data_Receive_Prepareº¯ÊýÊÇÐ­ÒéÔ¤½âÎö£¬¸ù¾ÝÐ­ÒéµÄ¸ñÊ½£¬½«ÊÕµ½µÄÊý¾Ý½øÐÐÒ»´Î¸ñÊ½ÐÔ½âÎö£¬¸ñÊ½ÕýÈ·µÄ»°ÔÙ½øÐÐÊý¾Ý½âÎö\n//ÒÆÖ²Ê±£¬´Ëº¯ÊýÓ¦ÓÉÓÃ»§¸ù¾Ý×ÔÉíÊ¹ÓÃµÄÍ¨ÐÅ·½Ê½×ÔÐÐµ÷ÓÃ£¬±ÈÈç´®¿ÚÃ¿ÊÕµ½Ò»×Ö½ÚÊý¾Ý£¬Ôòµ÷ÓÃ´Ëº¯ÊýÒ»´Î\n//´Ëº¯Êý½âÎö³ö·ûºÏ¸ñÊ½µÄÊý¾ÝÖ¡ºó£¬»á×ÔÐÐµ÷ÓÃÊý¾Ý½âÎöº¯Êý\nvoid ANO_DT_Data_Receive_Prepare(u8 data)\n{\n	static u8 RxBuffer[50];\n	static u8 _data_len = 0,_data_cnt = 0;\n	static u8 state = 0;\n	\n	if(state==0&&data==0xAA)\n	{\n		state=1;\n		RxBuffer[0]=data;\n	}\n	else if(state==1&&data==0xAF)\n	{\n		state=2;\n		RxBuffer[1]=data;\n	}\n	else if(state==2&&data<0XF1)\n	{\n		state=3;\n		RxBuffer[2]=data;\n	}\n	else if(state==3&&data<50)\n	{\n		state = 4;\n		RxBuffer[3]=data;\n		_data_len = data;\n		_data_cnt = 0;\n	}\n	else if(state==4&&_data_len>0)\n	{\n		_data_len--;\n		RxBuffer[4+_data_cnt++]=data;\n		if(_data_len==0)\n			state = 5;\n	}\n	else if(state==5)\n	{\n		state = 0;\n		RxBuffer[4+_data_cnt]=data;\n		ANO_DT_Data_Receive_Anl(RxBuffer,_data_cnt+5);\n	}\n	else\n		state = 0;\n}\n/////////////////////////////////////////////////////////////////////////////////////\n//Data_Receive_Anlº¯ÊýÊÇÐ­ÒéÊý¾Ý½âÎöº¯Êý£¬º¯Êý²ÎÊýÊÇ·ûºÏÐ­Òé¸ñÊ½µÄÒ»¸öÊý¾ÝÖ¡£¬¸Ãº¯Êý»áÊ×ÏÈ¶ÔÐ­ÒéÊý¾Ý½øÐÐÐ£Ñé\n//Ð£ÑéÍ¨¹ýºó¶ÔÊý¾Ý½øÐÐ½âÎö£¬ÊµÏÖÏàÓ¦¹¦ÄÜ\n//´Ëº¯Êý¿ÉÒÔ²»ÓÃÓÃ»§×ÔÐÐµ÷ÓÃ£¬ÓÉº¯ÊýData_Receive_Prepare×Ô¶¯µ÷ÓÃ\nvoid ANO_DT_Data_Receive_Anl(u8 *data_buf,u8 num)\n{\n	u8 sum = 0;\n	for(u8 i=0;i<(num-1);i++)\n		sum += *(data_buf+i);\n	if(!(sum==*(data_buf+num-1)))		return;		//ÅÐ¶Ïsum\n	if(!(*(data_buf)==0xAA && *(data_buf+1)==0xAF))		return;		//ÅÐ¶ÏÖ¡Í·\n	\n	if(*(data_buf+2)==0X01)\n	{\n		if(*(data_buf+4)==0X01)\n			mpu6050.Acc_CALIBRATE = 1;\n		if(*(data_buf+4)==0X02)\n			mpu6050.Gyro_CALIBRATE = 1;\n		if(*(data_buf+4)==0X03)\n		{\n			mpu6050.Acc_CALIBRATE = 1;		\n			mpu6050.Gyro_CALIBRATE = 1;			\n		}\n	}\n	\n	if(*(data_buf+2)==0X02)\n	{\n		if(*(data_buf+4)==0X01)\n		{\n			f.send_pid1 = 1;\n			f.send_pid2 = 1;\n			f.send_pid3 = 1;\n			f.send_pid4 = 1;\n			f.send_pid5 = 1;\n			f.send_pid6 = 1;\n		}\n		if(*(data_buf+4)==0X02)\n		{\n			\n		}\n		if(*(data_buf+4)==0XA0)		//¶ÁÈ¡°æ±¾ÐÅÏ¢\n		{\n			f.send_version = 1;\n		}\n		if(*(data_buf+4)==0XA1)		//»Ö¸´Ä¬ÈÏ²ÎÊý\n		{\n			Para_ResetToFactorySetup();\n		}\n	}\n\n	if(*(data_buf+2)==0X10)								//PID1\n    {\n        ctrl_1.PID[PIDROLL].kp  = 0.001*( (vs16)(*(data_buf+4)<<8)|*(data_buf+5) );\n        ctrl_1.PID[PIDROLL].ki  = 0.001*( (vs16)(*(data_buf+6)<<8)|*(data_buf+7) );\n        ctrl_1.PID[PIDROLL].kd  = 0.001*( (vs16)(*(data_buf+8)<<8)|*(data_buf+9) );\n        ctrl_1.PID[PIDPITCH].kp = 0.001*( (vs16)(*(data_buf+10)<<8)|*(data_buf+11) );\n        ctrl_1.PID[PIDPITCH].ki = 0.001*( (vs16)(*(data_buf+12)<<8)|*(data_buf+13) );\n        ctrl_1.PID[PIDPITCH].kd = 0.001*( (vs16)(*(data_buf+14)<<8)|*(data_buf+15) );\n        ctrl_1.PID[PIDYAW].kp 	= 0.001*( (vs16)(*(data_buf+16)<<8)|*(data_buf+17) );\n        ctrl_1.PID[PIDYAW].ki 	= 0.001*( (vs16)(*(data_buf+18)<<8)|*(data_buf+19) );\n        ctrl_1.PID[PIDYAW].kd 	= 0.001*( (vs16)(*(data_buf+20)<<8)|*(data_buf+21) );\n        ANO_DT_Send_Check(*(data_buf+2),sum);\n				Param_SavePID();\n    }\n    if(*(data_buf+2)==0X11)								//PID2\n    {\n        ctrl_1.PID[PID4].kp 	= 0.001*( (vs16)(*(data_buf+4)<<8)|*(data_buf+5) );\n        ctrl_1.PID[PID4].ki 	= 0.001*( (vs16)(*(data_buf+6)<<8)|*(data_buf+7) );\n        ctrl_1.PID[PID4].kd 	= 0.001*( (vs16)(*(data_buf+8)<<8)|*(data_buf+9) );\n        ctrl_1.PID[PID5].kp 	= 0.001*( (vs16)(*(data_buf+10)<<8)|*(data_buf+11) );\n        ctrl_1.PID[PID5].ki 	= 0.001*( (vs16)(*(data_buf+12)<<8)|*(data_buf+13) );\n        ctrl_1.PID[PID5].kd 	= 0.001*( (vs16)(*(data_buf+14)<<8)|*(data_buf+15) );\n        ctrl_1.PID[PID6].kp	  = 0.001*( (vs16)(*(data_buf+16)<<8)|*(data_buf+17) );\n        ctrl_1.PID[PID6].ki 	= 0.001*( (vs16)(*(data_buf+18)<<8)|*(data_buf+19) );\n        ctrl_1.PID[PID6].kd 	= 0.001*( (vs16)(*(data_buf+20)<<8)|*(data_buf+21) );\n        ANO_DT_Send_Check(*(data_buf+2),sum);\n				Param_SavePID();\n    }\n    if(*(data_buf+2)==0X12)								//PID3\n    {	\n        ctrl_2.PID[PIDROLL].kp  = 0.001*( (vs16)(*(data_buf+4)<<8)|*(data_buf+5) );\n        ctrl_2.PID[PIDROLL].ki  = 0.001*( (vs16)(*(data_buf+6)<<8)|*(data_buf+7) );\n        ctrl_2.PID[PIDROLL].kd  = 0.001*( (vs16)(*(data_buf+8)<<8)|*(data_buf+9) );\n        ctrl_2.PID[PIDPITCH].kp = 0.001*( (vs16)(*(data_buf+10)<<8)|*(data_buf+11) );\n        ctrl_2.PID[PIDPITCH].ki = 0.001*( (vs16)(*(data_buf+12)<<8)|*(data_buf+13) );\n        ctrl_2.PID[PIDPITCH].kd = 0.001*( (vs16)(*(data_buf+14)<<8)|*(data_buf+15) );\n        ctrl_2.PID[PIDYAW].kp 	= 0.001*( (vs16)(*(data_buf+16)<<8)|*(data_buf+17) );\n        ctrl_2.PID[PIDYAW].ki 	= 0.001*( (vs16)(*(data_buf+18)<<8)|*(data_buf+19) );\n        ctrl_2.PID[PIDYAW].kd 	= 0.001*( (vs16)(*(data_buf+20)<<8)|*(data_buf+21) );\n        ANO_DT_Send_Check(*(data_buf+2),sum);\n				Param_SavePID();\n    }\n	if(*(data_buf+2)==0X13)								//PID4\n	{\n		ANO_DT_Send_Check(*(data_buf+2),sum);\n	}\n	if(*(data_buf+2)==0X14)								//PID5\n	{\n		ANO_DT_Send_Check(*(data_buf+2),sum);\n	}\n	if(*(data_buf+2)==0X15)								//PID6\n	{\n		ANO_DT_Send_Check(*(data_buf+2),sum);\n	}\n}\n\nvoid ANO_DT_Send_Version(u8 hardware_type, u16 hardware_ver,u16 software_ver,u16 protocol_ver,u16 bootloader_ver)\n{\n	u8 _cnt=0;\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0x00;\n	data_to_send[_cnt++]=0;\n	\n	data_to_send[_cnt++]=hardware_type;\n	data_to_send[_cnt++]=BYTE1(hardware_ver);\n	data_to_send[_cnt++]=BYTE0(hardware_ver);\n	data_to_send[_cnt++]=BYTE1(software_ver);\n	data_to_send[_cnt++]=BYTE0(software_ver);\n	data_to_send[_cnt++]=BYTE1(protocol_ver);\n	data_to_send[_cnt++]=BYTE0(protocol_ver);\n	data_to_send[_cnt++]=BYTE1(bootloader_ver);\n	data_to_send[_cnt++]=BYTE0(bootloader_ver);\n	\n	data_to_send[3] = _cnt-4;\n	\n	u8 sum = 0;\n	for(u8 i=0;i<_cnt;i++)\n		sum += data_to_send[i];\n	data_to_send[_cnt++]=sum;\n	\n	ANO_DT_Send_Data(data_to_send, _cnt);\n}\nvoid ANO_DT_Send_Status(float angle_rol, float angle_pit, float angle_yaw, s32 alt, u8 fly_model, u8 armed)\n{\n	u8 _cnt=0;\n	vs16 _temp;\n	vs32 _temp2 = alt;\n	\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0x01;\n	data_to_send[_cnt++]=0;\n	\n	_temp = (int)(angle_rol*100);\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = (int)(angle_pit*100);\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = (int)(angle_yaw*100);\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	\n	data_to_send[_cnt++]=BYTE3(_temp2);\n	data_to_send[_cnt++]=BYTE2(_temp2);\n	data_to_send[_cnt++]=BYTE1(_temp2);\n	data_to_send[_cnt++]=BYTE0(_temp2);\n	\n	data_to_send[_cnt++] = fly_model;\n	\n	data_to_send[_cnt++] = armed;\n	\n	data_to_send[3] = _cnt-4;\n	\n	u8 sum = 0;\n	for(u8 i=0;i<_cnt;i++)\n		sum += data_to_send[i];\n	data_to_send[_cnt++]=sum;\n	\n	ANO_DT_Send_Data(data_to_send, _cnt);\n}\nvoid ANO_DT_Send_Senser(s16 a_x,s16 a_y,s16 a_z,s16 g_x,s16 g_y,s16 g_z,s16 m_x,s16 m_y,s16 m_z,s32 bar)\n{\n	u8 _cnt=0;\n	vs16 _temp;\n	\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0x02;\n	data_to_send[_cnt++]=0;\n	\n	_temp = a_x;\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = a_y;\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = a_z;	\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	\n	_temp = g_x;	\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = g_y;	\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = g_z;	\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	\n	_temp = m_x;	\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = m_y;	\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = m_z;	\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	\n	data_to_send[3] = _cnt-4;\n	\n	u8 sum = 0;\n	for(u8 i=0;i<_cnt;i++)\n		sum += data_to_send[i];\n	data_to_send[_cnt++] = sum;\n	\n	ANO_DT_Send_Data(data_to_send, _cnt);\n}\nvoid ANO_DT_Send_RCData(u16 thr,u16 yaw,u16 rol,u16 pit,u16 aux1,u16 aux2,u16 aux3,u16 aux4,u16 aux5,u16 aux6)\n{\n	u8 _cnt=0;\n	\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0x03;\n	data_to_send[_cnt++]=0;\n	data_to_send[_cnt++]=BYTE1(thr);\n	data_to_send[_cnt++]=BYTE0(thr);\n	data_to_send[_cnt++]=BYTE1(yaw);\n	data_to_send[_cnt++]=BYTE0(yaw);\n	data_to_send[_cnt++]=BYTE1(rol);\n	data_to_send[_cnt++]=BYTE0(rol);\n	data_to_send[_cnt++]=BYTE1(pit);\n	data_to_send[_cnt++]=BYTE0(pit);\n	data_to_send[_cnt++]=BYTE1(aux1);\n	data_to_send[_cnt++]=BYTE0(aux1);\n	data_to_send[_cnt++]=BYTE1(aux2);\n	data_to_send[_cnt++]=BYTE0(aux2);\n	data_to_send[_cnt++]=BYTE1(aux3);\n	data_to_send[_cnt++]=BYTE0(aux3);\n	data_to_send[_cnt++]=BYTE1(aux4);\n	data_to_send[_cnt++]=BYTE0(aux4);\n	data_to_send[_cnt++]=BYTE1(aux5);\n	data_to_send[_cnt++]=BYTE0(aux5);\n	data_to_send[_cnt++]=BYTE1(aux6);\n	data_to_send[_cnt++]=BYTE0(aux6);\n\n	data_to_send[3] = _cnt-4;\n	\n	u8 sum = 0;\n	for(u8 i=0;i<_cnt;i++)\n		sum += data_to_send[i];\n	\n	data_to_send[_cnt++]=sum;\n	\n	ANO_DT_Send_Data(data_to_send, _cnt);\n}\nvoid ANO_DT_Send_Power(u16 votage, u16 current)\n{\n	u8 _cnt=0;\n	u16 temp;\n	\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0x05;\n	data_to_send[_cnt++]=0;\n	\n	temp = votage;\n	data_to_send[_cnt++]=BYTE1(temp);\n	data_to_send[_cnt++]=BYTE0(temp);\n	temp = current;\n	data_to_send[_cnt++]=BYTE1(temp);\n	data_to_send[_cnt++]=BYTE0(temp);\n	\n	data_to_send[3] = _cnt-4;\n	\n	u8 sum = 0;\n	for(u8 i=0;i<_cnt;i++)\n		sum += data_to_send[i];\n	\n	data_to_send[_cnt++]=sum;\n	\n	ANO_DT_Send_Data(data_to_send, _cnt);\n}\nvoid ANO_DT_Send_MotoPWM(u16 m_1,u16 m_2,u16 m_3,u16 m_4,u16 m_5,u16 m_6,u16 m_7,u16 m_8)\n{\n	u8 _cnt=0;\n	\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0x06;\n	data_to_send[_cnt++]=0;\n	\n	data_to_send[_cnt++]=BYTE1(m_1);\n	data_to_send[_cnt++]=BYTE0(m_1);\n	data_to_send[_cnt++]=BYTE1(m_2);\n	data_to_send[_cnt++]=BYTE0(m_2);\n	data_to_send[_cnt++]=BYTE1(m_3);\n	data_to_send[_cnt++]=BYTE0(m_3);\n	data_to_send[_cnt++]=BYTE1(m_4);\n	data_to_send[_cnt++]=BYTE0(m_4);\n	data_to_send[_cnt++]=BYTE1(m_5);\n	data_to_send[_cnt++]=BYTE0(m_5);\n	data_to_send[_cnt++]=BYTE1(m_6);\n	data_to_send[_cnt++]=BYTE0(m_6);\n	data_to_send[_cnt++]=BYTE1(m_7);\n	data_to_send[_cnt++]=BYTE0(m_7);\n	data_to_send[_cnt++]=BYTE1(m_8);\n	data_to_send[_cnt++]=BYTE0(m_8);\n	\n	data_to_send[3] = _cnt-4;\n	\n	u8 sum = 0;\n	for(u8 i=0;i<_cnt;i++)\n		sum += data_to_send[i];\n	\n	data_to_send[_cnt++]=sum;\n	\n	ANO_DT_Send_Data(data_to_send, _cnt);\n}\nvoid ANO_DT_Send_PID(u8 group,float p1_p,float p1_i,float p1_d,float p2_p,float p2_i,float p2_d,float p3_p,float p3_i,float p3_d)\n{\n	u8 _cnt=0;\n	vs16 _temp;\n	\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0xAA;\n	data_to_send[_cnt++]=0x10+group-1;\n	data_to_send[_cnt++]=0;\n	\n	\n	_temp = p1_p * 1000;\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = p1_i  * 1000;\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = p1_d  * 1000;\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = p2_p  * 1000;\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = p2_i  * 1000;\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = p2_d * 1000;\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = p3_p  * 1000;\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = p3_i  * 1000;\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	_temp = p3_d * 1000;\n	data_to_send[_cnt++]=BYTE1(_temp);\n	data_to_send[_cnt++]=BYTE0(_temp);\n	\n	data_to_send[3] = _cnt-4;\n	\n	u8 sum = 0;\n	for(u8 i=0;i<_cnt;i++)\n		sum += data_to_send[i];\n	\n	data_to_send[_cnt++]=sum;\n\n	ANO_DT_Send_Data(data_to_send, _cnt);\n}\n\n/******************* (C) COPYRIGHT 2014 ANO TECH *****END OF FILE************/\n",
			"file": "/F/快盘/DATA/Source/MultiRotor/MultiRotor/MultiRotor/HardWareDriver/C/ANO_DT.c",
			"file_size": 17763,
			"file_write_time": 131076907292814369,
			"settings":
			{
				"buffer_size": 17191,
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"file": "/F/快盘/DATA/Source/MultiRotor/MultiRotor/MultiRotor/HardWareDriver/H/ANO_DT.h",
			"settings":
			{
				"buffer_size": 1201,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/AutoHotkey/AutoHotkey.sublime-build",
					""
				],
				[
					"Packages/AutoHotkey/AutoHotkey.sublime-build",
					"Run"
				]
			],
			[
				"Packages/AutoHotkey/AutoHotkey.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/C.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/C.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Java/Ant.sublime-build",
					""
				],
				[
					"Packages/Java/JavaC.sublime-build",
					""
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Java/JavaC.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Markdown Preview/Markdown.sublime-build",
					""
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					""
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Re-run sketch"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Run sketch (Processing 3 only)"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Run sketch fullscreen"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Export sketch as application"
				]
			],
			[
				"Packages/Processing/Build Systems/Processing.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					""
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Re-run sketch"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Run sketch (Processing 3 only)"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Run sketch fullscreen"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Export sketch as application"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Kill running sketches"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Processing/Build Systems/Processing.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/C.sublime-build",
					""
				],
				[
					"Packages/User/C.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/C.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "Package Control: in",
		"selected_items":
		[
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"insp",
				"Package Control: Install Package"
			],
			[
				"run",
				"Build With: C - RunInCommand"
			],
			[
				"task",
				"Tasks: New document"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"inpk",
				"Package Control: Install Package"
			],
			[
				"disp",
				"Package Control: Disable Package"
			],
			[
				"inp",
				"Package Control: Install Package"
			],
			[
				"al",
				"AlignTab: Table Mode"
			],
			[
				"Package Control: rp",
				"Package Control: Remove Package"
			],
			[
				"Package Control: inp",
				"Package Control: Install Package"
			],
			[
				"Package Control: pack",
				"Package Control: Install Package"
			],
			[
				"Package Control: en",
				"Package Control: Enable Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"Snippet: ",
				"Snippet: printf …"
			],
			[
				"mpb",
				"Markdown Preview: Preview in Browser"
			],
			[
				"mp",
				"Markdown Preview: Open Markdown Cheat sheet"
			],
			[
				"ma",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Package Control: m",
				"Package Control: Remove Package"
			],
			[
				"markm",
				"Markmon launch"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: rep",
				"Package Control: Remove Package"
			],
			[
				"snip",
				"Snippet: Typedef"
			],
			[
				"Package Control: remp",
				"Package Control: Remove Package"
			],
			[
				"Package Control: dis",
				"Package Control: Discover Packages"
			]
		],
		"width": 464.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/快盘/DATA/Source/MultiRotor/MultiRotor/MultiRotor",
		"/F/快盘/DATA/Source/MultiRotor/MultiRotor/MultiRotor/HardWareDriver",
		"/F/快盘/DATA/Source/MultiRotor/MultiRotor/MultiRotor/HardWareDriver/C",
		"/F/快盘/DATA/Source/MultiRotor/MultiRotor/MultiRotor/HardWareDriver/H"
	],
	"file_history":
	[
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 108.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			" 		",
			"编译环境：",
			"s",
			"@@@",
			"<\\b.*\\\"\\(",
			"<script language=\"javascript\">document.write(unescape(decodeURIComponent(\"(",
			"<\\b.*\"(",
			"\"ed2k=\"",
			"ed2k://+.*\\/",
			"this.",
			"uint8",
			"	\n",
			"MessageMSGCB",
			"                ",
			"_speed",
			"extern",
			"r1",
			",,",
			"EE_WriteVariable(VirtAddVarTab",
			"EE_WriteVariable(VirtAddVarTab[EE_PID_ROL_P],_temp);",
			"data_to_send[_cnt++] = BYTE1(_temp);",
			"ANO_OK_Flag",
			"Sbus_Cnt",
			"ANO_Cnt",
			"x",
			"133",
			"color=0x3399ff",
			"w100",
			"w300",
			"w200",
			"28",
			"64",
			"* 0",
			"* 1",
			"* 0",
			"0",
			"[a",
			"c *",
			"[adder]",
			"wm",
			"X16",
			"F8",
			"8",
			"\\",
			"uint16_t",
			"gui_draw_vline",
			"gui_draw_hline",
			"OLED_P6x8Str",
			"OLED_P8x16Str",
			"OLED_P16x16Ch",
			" unsigned char ",
			"r3",
			"17",
			"];",
			"[]",
			"H_rrkks",
			"rxH_rrkk",
			"rxH_rkrs",
			"rx_h11",
			"rx_h",
			"h_rrks",
			"5",
			"a",
			"sprintf",
			"52",
			"TestRoutine_SendMessage",
			"h1",
			"H2",
			"H1",
			"uint8",
			"/*",
			"*/",
			"white",
			"osal_memcpy",
			"SendMessage",
			"Serial",
			"endPointDesc_t",
			"2*",
			"32",
			"output",
			"16",
			"str",
			"printf",
			"16",
			"output1",
			"   ",
			"md51",
			";.",
			";..",
			";...",
			"BV(2)",
			"UART_r",
			"UART_GetNewData",
			") + (",
			"BIT3",
			"BIT2",
			"BIT7",
			"BIT6",
			"BIT1",
			"UART_RX",
			"UART_SendByte(",
			"UART_CH0",
			"uart",
			"0A",
			"UartSendString",
			"SELP0",
			"P0SEL",
			"EA",
			"comment",
			"xlink<",
			"General",
			"general",
			"general<",
			"bmbaozha",
			"s",
			"k",
			"j",
			"i",
			"share",
			"Content",
			"comment",
			"commnet",
			"\"ad\"",
			"border-radius",
			"12",
			"theme",
			"120",
			"Plane"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"@@@",
			"OLED_ShowStr",
			"OLED_ShowCN",
			" ",
			"md5",
			";",
			"BV(3)",
			"BV(2)",
			"BV(7)",
			"BV(6)",
			"BV(1)"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "F:\\快盘\\DATA\\Source\\MultiRotor\\MultiRotor\\MultiRotor"
		}
	],
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/F/快盘/DATA/Source/MultiRotor/MultiRotor/MultiRotor/HardWareDriver/C/ANO_DT.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17191,
						"regions":
						{
						},
						"selection":
						[
							[
								419,
								419
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"in_converting": true,
							"incomplete_sync": null,
							"origin_encoding": "GB2312",
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/F/快盘/DATA/Source/MultiRotor/MultiRotor/MultiRotor/HardWareDriver/H/ANO_DT.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1201,
						"regions":
						{
						},
						"selection":
						[
							[
								73,
								73
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"incomplete_sync": null,
							"origin_encoding": "ASCII",
							"remote_loading": false,
							"side_bar_folders_auto_load_folder": 1,
							"synced": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.astyle_error_message":
	{
		"height": 154.0
	},
	"output.clang":
	{
		"height": 154.0
	},
	"output.exec":
	{
		"height": 219.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.markdown":
	{
		"height": 290.0
	},
	"output.sftp":
	{
		"height": 154.0
	},
	"pinned_build_system": "Packages/Java/JavaC.sublime-build",
	"project": "",
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 220.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
